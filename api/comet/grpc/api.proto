syntax = "proto3";

package goim.comet;
option go_package = "grpc";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/hhy5861/goim/api/grpc/common/api.proto";

service Comet {
  rpc Ping(Empty) returns(Empty);
  rpc Close(Empty) returns(Empty);
  rpc PushMsg(PushMsgReq) returns (PushMsgReply);
  rpc Broadcast(BroadcastReq) returns (BroadcastReply);
  rpc BroadcastRoom(BroadcastRoomReq) returns (BroadcastRoomReply);
  rpc Rooms(RoomsReq) returns (RoomsReply);
}

/*
 * v1.0.0
 * protocol
 */
message Proto {
  int32 ver = 1 [(gogoproto.jsontag) = "ver"];
  int32 seq = 2 [(gogoproto.jsontag) = "seq"];
  common.ClientMsg body = 3 [(gogoproto.jsontag) = "body"];
}

message Empty{}

message PushMsgReq {
  repeated string keys = 1;
  Proto proto = 2;
}

message PushMsgReply {}

message BroadcastReq{
  Proto proto = 1;
  int32 speed = 2;
}

message BroadcastReply{}

message BroadcastRoomReq {
  string roomID = 1;
  Proto proto = 2;
}

message BroadcastRoomReply{}

message RoomsReq{}

message RoomsReply {
  option (gogoproto.goproto_stringer) = false;
  map<string, bool> rooms = 1;
}
